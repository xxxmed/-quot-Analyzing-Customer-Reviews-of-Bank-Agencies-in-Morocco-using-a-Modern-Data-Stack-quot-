{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.6", "generated_at": "2025-06-09T12:13:15.484994Z", "invocation_id": "e83082d2-9797-40f7-9314-ab27a4af9346", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-09T12:13:14.298533Z", "completed_at": "2025-06-09T12:13:14.316078Z"}, {"name": "execute", "started_at": "2025-06-09T12:13:14.317302Z", "completed_at": "2025-06-09T12:13:14.514772Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21623873710632324, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.bank_reviews_analysis.stg_bank_reviews", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"DataWare\".\"public\".\"bank_reviews\"\n),\n\n-- Remove duplicates based on all columns\ndeduplicated as (\n    select distinct\n        id,\n        bank_name,\n        branch_name,\n        location,\n        review_text,\n        rating,\n        review_date,\n        created_at\n    from source\n),\n\n-- Handle missing values\ncleaned as (\n    select\n        id,\n        coalesce(bank_name, 'Unknown Bank') as bank_name,\n        coalesce(branch_name, 'Unknown Branch') as branch_name,\n        coalesce(location, 'Unknown Location') as location,\n        coalesce(review_text, '') as review_text,\n        coalesce(rating, 3) as rating,  -- Default to neutral rating\n        coalesce(review_date, current_date) as review_date,\n        coalesce(created_at, current_timestamp) as created_at\n    from deduplicated\n)\n\nselect * from cleaned", "relation_name": "\"DataWare\".\"public\".\"stg_bank_reviews\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-09T12:13:14.542104Z", "completed_at": "2025-06-09T12:13:14.551488Z"}, {"name": "execute", "started_at": "2025-06-09T12:13:14.551488Z", "completed_at": "2025-06-09T12:13:14.799631Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.26923608779907227, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.bank_reviews_analysis.int_bank_reviews", "compiled": true, "compiled_code": "/*\nThis model transforms bank review data by:\n1. Normalizing text fields (lowercase, removing special characters, trimming whitespace)\n2. Adding sentiment analysis based on rating scores\n3. Extracting temporal components (year, month) for time-based analysis\n4. Calculating review age in days\n\nThe model follows these steps:\n- Starts with cleaned staging data (stg_bank_reviews)\n- Applies text cleaning using the cleaned_text macro\n- Adds derived fields for analysis\n- Materializes as a table for better query performance\n*/\n\n\n\nwith stg_reviews as (\n    select * from \"DataWare\".\"public\".\"stg_bank_reviews\"\n),\n\ntext_normalized as (\n    select\n        id,\n        bank_name,\n        branch_name,\n        location,\n        review_text,\n        \n    -- Convert to lowercase, remove special characters and numbers, clean whitespace\n    trim(\n        regexp_replace(\n            regexp_replace(\n                lower(coalesce(review_text, '')),\n                '[^a-z\\s]',  -- Remove special characters and numbers, keep only letters and spaces\n                '',\n                'g'\n            ),\n            '\\s+',  -- Clean whitespace\n            ' ',\n            'g'\n        )\n    )\n as cleaned_text,\n        rating,\n        review_date,\n        created_at\n    from stg_reviews\n),\n\ntransformed as (\n    select\n        id,\n        bank_name,\n        branch_name,\n        location,\n        review_text,\n        cleaned_text,\n        rating,\n        review_date,\n        created_at,\n        -- Add some useful transformations\n        case \n            when rating >= 4 then 'Positive'\n            when rating = 3 then 'Neutral'\n            else 'Negative'\n        end as sentiment,\n        -- Extract year and month for easier analysis\n        extract(year from review_date) as review_year,\n        extract(month from review_date) as review_month,\n        -- Calculate days since review\n        current_date - review_date as days_since_review\n    from text_normalized\n)\n\nselect * from transformed", "relation_name": "\"DataWare\".\"public\".\"int_bank_reviews\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-09T12:13:14.822182Z", "completed_at": "2025-06-09T12:13:14.835937Z"}, {"name": "execute", "started_at": "2025-06-09T12:13:14.837924Z", "completed_at": "2025-06-09T12:13:15.384847Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5695924758911133, "adapter_response": {"_message": "SELECT 817", "code": "SELECT", "rows_affected": 817}, "message": "SELECT 817", "failures": null, "unique_id": "model.bank_reviews_analysis.mart_location_reviews", "compiled": true, "compiled_code": "\n\nwith location_reviews as (\n    select \n    \n        bank_name,\n        location,\n        string_agg(cleaned_text, ' ') as concatenated_text,\n        count(*) as review_count,\n        round(avg(rating)::numeric, 2) as avg_rating,\n        min(rating) as min_rating,\n        max(rating) as max_rating,\n        count(case when rating >= 4 then 1 end) as positive_reviews,\n        count(case when rating <= 2 then 1 end) as negative_reviews\n    from \"DataWare\".\"public\".\"int_bank_reviews\"\n    where cleaned_text is not null\n    group by location, bank_name\n)\n\nselect \n    bank_name,\n    location,\n    concatenated_text,\n    review_count,\n    avg_rating,\n    min_rating,\n    max_rating,\n    positive_reviews,\n    negative_reviews,\n    round((positive_reviews::float / review_count * 100)::numeric, 2) as positive_review_percentage,\n    round((negative_reviews::float / review_count * 100)::numeric, 2) as negative_review_percentage\nfrom location_reviews\norder by bank_name,location", "relation_name": "\"DataWare\".\"public\".\"mart_location_reviews\"", "batch_results": null}], "elapsed_time": 1.5989062786102295, "args": {"state_modified_compare_more_unrendered_values": false, "state_modified_compare_vars": false, "exclude": [], "introspect": true, "log_format_file": "debug", "log_path": "C:\\Users\\Ahmed\\OneDrive\\Bureau\\Analyzing-Customer-Reviews-of-Bank-Agencies-in-Morocco\\DBT\\logs", "select": [], "show_resource_report": false, "require_nested_cumulative_type_params": false, "partial_parse": true, "populate_cache": true, "require_explicit_package_overrides_for_builtin_materializations": true, "require_resource_names_without_spaces": false, "version_check": true, "favor_state": false, "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "log_level": "info", "cache_selected_only": false, "use_colors_file": true, "partial_parse_file_diff": true, "write_json": true, "quiet": false, "log_level_file": "debug", "require_batched_execution_for_custom_microbatch_strategy": false, "require_yaml_configuration_for_mf_time_spines": false, "which": "run", "profiles_dir": "C:\\Users\\Ahmed\\OneDrive\\Bureau\\Analyzing-Customer-Reviews-of-Bank-Agencies-in-Morocco\\DBT", "print": true, "project_dir": "C:\\Users\\Ahmed\\OneDrive\\Bureau\\Analyzing-Customer-Reviews-of-Bank-Agencies-in-Morocco\\DBT", "invocation_command": "dbt run", "vars": {}, "empty": false, "indirect_selection": "eager", "strict_mode": false, "use_colors": true, "log_file_max_bytes": 10485760, "source_freshness_run_project_hooks": false, "send_anonymous_usage_stats": true, "skip_nodes_if_on_run_start_fails": false, "defer": false, "printer_width": 80, "log_format": "default"}}